---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import type { Testimonials as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  callToAction,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<style>
  .carousel {
    display: flex;
    overflow: hidden;
    position: relative;
    width: 100%;
  }

  .carousel-track {
    display: flex;
    width: max-content;
    margin-bottom: 50px;
    animation: scroll 40s linear infinite;
  }

  @keyframes scroll {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-50%);
    }
  }

  .carousel-item {
    flex: 0 0 auto;
    width: 320px;
    margin-right: 24px;
  }

  .carousel-item > div {
    display: flex;
    flex-direction: column;
    height: auto;
    min-height: 100%;
  }
</style>

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-[100rem] mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="carousel">
    <div class="carousel-track">
      {testimonials.concat(testimonials).map(({ title, testimonial, name, job, image }, index) => (
        <Fragment key={`testimonial-${index}`}>
          <div class="carousel-item">
            <div class="flex flex-col p-6 rounded-md shadow-2xl dark:shadow-none dark:border dark:border-slate-600 h-full min-h-[250px]">
              {title && <h2 class="text-lg font-medium leading-6 pb-4">{title}</h2>}
              {testimonial && (
                <blockquote class="flex-auto">
                  <p class="text-muted">" {testimonial} "</p>
                </blockquote>
              )}

              <hr class="border-slate-200 dark:border-slate-600 my-4" />

              <div class="flex items-center mt-auto">
                {image && (
                  <div class="h-12 w-12 rounded-full border border-slate-200 dark:border-slate-600">
                    {typeof image === 'string' ? (
                      <Fragment set:html={image} />
                    ) : (
                      <Image
                        class="h-12 w-12 rounded-full border border-slate-200 dark:border-slate-600 min-w-full min-h-full"
                        width={48}
                        height={48}
                        widths={[400, 768]}
                        layout="fixed"
                        {...image}
                      />
                    )}
                  </div>
                )}
                <div class="grow ml-3 rtl:ml-0 rtl:mr-3">
                  {name && <p class="text-base font-semibold">{name}</p>}
                  {job && <p class="text-xs text-muted">{job}</p>}
                </div>
              </div>
            </div>
          </div>
        </Fragment>
      ))}
    </div>
  </div>

  {callToAction && (
    <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
      <Button {...callToAction} />
    </div>
  )}
</WidgetWrapper>
